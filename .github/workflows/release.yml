name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
      packages: write
    runs-on: ${{ matrix.os }}
    environment: Production
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Pre-install Radix UI packages
        env:
          BUN_CONFIG_NETWORK_TIMEOUT: 300000
        run: |
          echo "Pre-installing Radix UI packages..."
          bun add @radix-ui/react-tooltip@1.0.7 @radix-ui/react-alert-dialog@1.1.6 @radix-ui/react-dialog@1.1.6 @radix-ui/react-dropdown-menu@2.1.6 @radix-ui/react-popover@1.1.6 @radix-ui/react-toast@1.2.6
        shell: bash

      - name: Install dependencies (with retries)
        env:
          BUN_CONFIG_REGISTRY: https://registry.npmjs.org
          BUN_CONFIG_NETWORK_TIMEOUT: 100000
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            if bun install --frozen-lockfile; then
              echo "Installation successful"
              break
            fi
            if [ $attempt -eq $max_attempts ]; then
              echo "All attempts failed"
              exit 1
            fi
            attempt=$((attempt + 1))
            echo "Retrying in 10 seconds..."
            sleep 10
          done
        shell: bash

      # Install required dependencies for Linux builds
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libwebkit2gtk-4.1-0 libgbm1

      # Setup macOS signing
      - name: Install Apple codesigning certificates
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CSC_LINK }}
          P12_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      # Platform-specific builds
      - name: Build and Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SKIP_NOTARIZE: ${{ secrets.SKIP_NOTARIZE }}
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            bun run build:win
          elif [ "$RUNNER_OS" == "macOS" ]; then
            bun run build:mac
          else
            bun run build:linux
          fi
        shell: bash

      # Cleanup keychain
      - name: Clean up keychain
        if: matrix.os == 'macos-latest' && always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
